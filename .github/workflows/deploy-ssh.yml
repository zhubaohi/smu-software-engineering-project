name: Deploy to Server via SSH

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository (main)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: Create archive of repository (exclude .git)
        run: |
          tar --exclude='.git' -czf repo.tgz .

      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add remote host to known_hosts
        run: |
          ssh-keyscan -H "$SSH_HOST" >> ~/.ssh/known_hosts
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}

      - name: Upload repository to server
        run: |
          scp -o StrictHostKeyChecking=no repo.tgz $SSH_USER@$SSH_HOST:$DEPLOY_PATH/
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}

      - name: Deploy and run npm on server
        run: |
          ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST "export DEPLOY_PATH='$DEPLOY_PATH'; bash -s" << 'EOF'
          set -euo pipefail
          mkdir -p "$DEPLOY_PATH"
          cd "$DEPLOY_PATH"
          TMP_DIR="deploy_$(date +%Y%m%d%H%M%S)"
          mkdir -p "$TMP_DIR"
          tar -xzf repo.tgz -C "$TMP_DIR"
          rm -f repo.tgz
          # preserve uploads if they exist on server
          if [ -d "src/uploads" ] && [ -d "$TMP_DIR/src" ]; then
            mkdir -p "$TMP_DIR/src/uploads"
            cp -rn src/uploads/* "$TMP_DIR/src/uploads/" 2>/dev/null || true
          fi
          # replace current contents with new (use rsync if available, else fallback)
          if command -v rsync >/dev/null 2>&1; then
            rsync -a --delete "$TMP_DIR"/ ./
          else
            # fallback: delete everything except TMP_DIR then copy over
            find . -mindepth 1 -maxdepth 1 ! -name "$(basename "$TMP_DIR")" -exec rm -rf {} +
            shopt -s dotglob || true
            cp -a "$TMP_DIR"/* ./ || true
            shopt -u dotglob || true
          fi
          rm -rf "$TMP_DIR"
          # install and start backend
          cd backend
          npm ci || npm install
          # try to free port 6789 if needed
          if command -v fuser >/dev/null 2>&1; then fuser -k 6789/tcp || true; fi
          nohup npm start >/dev/null 2>&1 &
          echo "Deployment completed at $(date)"
          EOF
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
